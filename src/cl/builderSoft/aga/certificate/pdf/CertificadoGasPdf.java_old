package cl.builderSoft.aga.certificate.pdf;

import java.io.File;
import java.util.Date;
import java.util.List;

import cl.builderSoft.aga.certificate.vo.CertificadoGasVo;
import cl.builderSoft.framework.log.BSLog;
import cl.builderSoft.util.DateFormatter;
import cl.builderSoft.utilpdf.PdfComponent;
import cl.builderSoft.utilpdf.PdfDocument;
import cl.builderSoft.utilpdf.Resources;
import cl.builderSoft.utilpdf.components.HorizontalPanel;
import cl.builderSoft.utilpdf.components.HorizontalTablePanel;
import cl.builderSoft.utilpdf.components.Paragraph;
import cl.builderSoft.utilpdf.components.ParagraphCompuesto;
import cl.builderSoft.utilpdf.components.Title;

import com.lowagie.text.Font;

public class CertificadoGasPdf_old extends PdfDocument {
	private String titulo = "HIQ CERTIFICATE";

	CertificadoGasVo certificadoGasVo = new CertificadoGasVo();

	public void addElements(List list) throws Exception {
		putEncabezado(list);
		putEncabezado2(list);
		putEncabezado3_old(list);

	}

	private void putEncabezado3(List list) {
		// DATOS DEL PRODUCTO
		Font[] fontGlosa = new Font[] { Resources.fontNormal };
		String[] sGlosa = { "Tipo de Cilindro / " };

		ParagraphCompuesto pGlosa = new ParagraphCompuesto(sGlosa, fontGlosa);
		// pGlosa.setNewLine(false);

		String[] sValue = { "XXXXXXXXXXXXXXXXXXXXX" };
		ParagraphCompuesto pValue = new ParagraphCompuesto(sValue);
		// pValue.setNewLine(true);

		String[] sGlosa2 = { "Presion Llenado / " };
		Font[] fontGlosa2 = new Font[] { Resources.fontNormal };
		ParagraphCompuesto pGlosa2 = new ParagraphCompuesto(sGlosa2, fontGlosa2);
		pGlosa2.setNewLine2(true);

		String[] sValue2 = { "YYYYYYYYYYYYYYYYYYYYYYY" };
		ParagraphCompuesto pValue2 = new ParagraphCompuesto(sValue2);
		// pValue2.setNewLine(true);

		HorizontalTablePanel hGlosa = new HorizontalTablePanel(new PdfComponent[] { pGlosa, pValue, pGlosa2, pValue2 });
		hGlosa.setWidths(new int[] { 25, 25, 25, 25 });
		list.add(hGlosa);
	}

	private void putEncabezado3_old(List list) {
		// DATOS DEL PRODUCTO
		Font[] fontGlosa = getFontParagraph1();
		String[] sGlosa = getTextParagraph1();
		String[] sValue = getDataParagraph1();

		ParagraphCompuesto pGlosa = new ParagraphCompuesto(sGlosa, fontGlosa);
		pGlosa.setNewLine(true);

		Font[] fontValue1 = getFontData2();
		ParagraphCompuesto pValue = new ParagraphCompuesto(sValue, fontGlosa);
		pValue.setNewLine(true);

		String[] sGlosa2 = { "Presion Llenado / ", "Full pressure(15°):", "Volumen gas / ", "Gas vol 15°C:",
				"Presión mín uso / ", "minimum pressure of use:", };
		Font[] fontGlosa2 = new Font[] { Resources.fontNormal, Resources.fontNormalCompuesto, Resources.fontNormal,
				Resources.fontNormalCompuesto, Resources.fontNormal, Resources.fontNormalCompuesto };
		ParagraphCompuesto pGlosa2 = new ParagraphCompuesto(sGlosa2, fontGlosa2);
		pGlosa2.setNewLine2(true);

		String[] sValue2 = getDataParagraph1();
		ParagraphCompuesto pValue2 = new ParagraphCompuesto(sValue2);
		pValue2.setNewLine(true);

		HorizontalTablePanel hGlosa = new HorizontalTablePanel(new PdfComponent[] { pGlosa, pValue, pGlosa2, pValue2 });
		hGlosa.setWidths(new int[] { 25, 25, 25, 25 });
		list.add(hGlosa);

	}

	private Font[] getFontData2() {
		Font[] fontValue1 = new Font[] { Resources.fontNormal, Resources.fontNormalCompuesto, Resources.fontNormal,
				Resources.fontNormal, Resources.fontNormal, Resources.fontNormal };
		return fontValue1;
	}

	private String[] getDataParagraph1() {
		String[] sValue = { certificadoGasVo.getTipoCilindro(), " ", certificadoGasVo.getConexionValvula(), " ",
				certificadoGasVo.getEstabilidadGarantizada(), " ", certificadoGasVo.getTemperaturaRecomendada(), " " };
		return sValue;
	}

	private String[] getTextParagraph1() {
		String[] sGlosa = { "Tipo de Cilindro / ", "Cylinder Type: ", "Conexión válvula / ", "Volve connection:",
				"Estabilidad garantizada/ ", "Guaranteed Stability:", "Temperatura recomendada / ",
				"Recommended Storage And usage temperature:" };
		return sGlosa;
	}

	private Font[] getFontParagraph1() {
		Font[] fontGlosa = new Font[] { Resources.fontNormal, Resources.fontNormalCompuesto, Resources.fontNormal,
				Resources.fontNormalCompuesto, Resources.fontNormal, Resources.fontNormalCompuesto, Resources.fontNormal,
				Resources.fontNormalCompuesto };
		return fontGlosa;
	}

	private void putEncabezado(List list) {
		Title title = new Title(titulo);
		Paragraph blank = new Paragraph("");

		// FECHA REPORTE Y TITULO

		String[] textFecha = { "Fecha / ", "Date" };
		Font[] fonts = new Font[] { Resources.FONT_TITLE_3, Resources.fontTitle3Compuesto };

		ParagraphCompuesto tituloFecha = new ParagraphCompuesto(textFecha, fonts);
		String fecha = new DateFormatter(DateFormatter.FORMAT_DD_MM_YYYY).format(new Date());
		Paragraph valueFecha = new Paragraph(fecha, Resources.fontNormal);

		HorizontalPanel header = new HorizontalPanel(new PdfComponent[] { blank, tituloFecha });
		HorizontalPanel header2 = new HorizontalPanel(new PdfComponent[] { blank, valueFecha });
		header.setWidths(new int[] { 80, 20 });
		header.setAlignments(new int[] { PdfComponent.ALIGN_LEFT, PdfComponent.ALIGN_RIGHT });
		header2.setAlignments(new int[] { PdfComponent.ALIGN_LEFT, PdfComponent.ALIGN_RIGHT });

		list.add(new Paragraph("\n\n"));
		list.add(header);
		list.add(header2);
		list.add(title);
		list.add(new Paragraph("\n"));
	}

	private void putEncabezado2(List list) {
		String[] producto = new String[] { "Nombre del Producto / ", "Product Name: ", certificadoGasVo.getNombreProducto() };
		Font[] fontProducto = new Font[] { Resources.fontNormal, Resources.fontNormalCompuesto, Resources.fontNormal };

		ParagraphCompuesto pProducto = new ParagraphCompuesto(producto, fontProducto);

		// list.add(pProducto);

		Font[] font = new Font[] { Resources.fontNormal, Resources.fontNormalCompuesto, Resources.fontNormal,
				Resources.fontNormalCompuesto, Resources.fontNormal, Resources.fontNormalCompuesto };
		Font[] font2 = new Font[] { Resources.fontNormal, Resources.fontNormal, Resources.fontNormal };
		String[] strings = new String[] { "Código de producto / ", "Product Code", "Nº de Lote / ", "Lote No.", "Nº de Orden / ",
				"Order No." };
		String[] sPunto = new String[] { ":", ":", ":" };
		String[] sValue = new String[] { certificadoGasVo.getProducto(), certificadoGasVo.getNumeroLote(),
				certificadoGasVo.getNumeroOrden() };

		ParagraphCompuesto paragraphCompuesto = new ParagraphCompuesto(strings, font);
		paragraphCompuesto.setNewLine2(true);

		ParagraphCompuesto pValue = new ParagraphCompuesto(sValue, font2);
		pValue.setNewLine(true);

		ParagraphCompuesto pPunto = new ParagraphCompuesto(sPunto, font2);
		pPunto.setNewLine(true);

		HorizontalTablePanel hp = new HorizontalTablePanel(new PdfComponent[] { pProducto, paragraphCompuesto, pPunto, pValue });
		hp.setWidths(new int[] { 50, 20, 3, 27 });

		list.add(hp);

	}

	public void setValue(Object o) {
		certificadoGasVo = (CertificadoGasVo) o;
	}

	public static void main(String[] args) throws Exception {
		File f = new File("c:/bs/reporteAnaliticoGas.pdf");
		PdfDocument test = new CertificadoGasPdf();
		CertificadoGasVo o = new CertificadoGasVo();
		o.setNombreProducto("XXXXXXXXXXXXXXXXXXXXXX");
		test.setValue(o);
		// test.setWaterMark("Mi Borrador");
		test.create(f);

	}

}
